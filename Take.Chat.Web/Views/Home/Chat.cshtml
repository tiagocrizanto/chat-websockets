@model string
@{
    ViewData["Title"] = "Home Page";
}
<!DOCTYPE html>
<html>
<head>
    <title>Chat</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
    <link rel="stylesheet" href="~/css/chat.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.min.css">
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.min.js"></script>
</head>
<!--Coded With Love By Mutiullah Samim-->
<body>
    
    <div class="container-fluid h-100">
        <div class="row justify-content-center">
            <label>If you want send private message to specific user type <b>/private</b> followed by the user name. Example: /private JohnDoe Hello John! How are you?</label>
        </div>
        <div class="row justify-content-center">
            <label>For send a public message to specific user type <b>/to</b> followed by the user name. Example: /to JohnDoe Hello John! How are you?</label>
        </div>
        <div class="row justify-content-center h-100">
            <div class="col-md-4 col-xl-3 chat">
                <div class="card mb-sm-3 mb-md-0 contacts_card">
                    <div class="card-body contacts_body">
                        <ui id="contacts" class="contacts">

                        </ui>
                    </div>
                    <div class="card-footer"></div>
                </div>
            </div>
            <div class="col-md-8 col-xl-6 chat">
                <div class="card">
                    <div class="card-header msg_head" style="height: 40px;">
                        <span id="action_menu_btn"><i class="fas fa-ellipsis-v"></i></span>
                        <div class="action_menu">
                            <ul>
                                <li id="exitChat"><i class="fas fa-exit"></i> Exit chat</li>
                            </ul>
                        </div>
                        <div class="d-flex bd-highlight">
                            <div class="user_info">
                                <span>Global chat</span>
                            </div>
                        </div>
                    </div>
                    <div id="msgs" class="card-body msg_card_body">
                    </div>
                    <div class="card-footer">
                        <div class="input-group">
                            <textarea id="MessageField" class="form-control type_msg" placeholder="Type your message..."></textarea>
                            <div id="sendMessage" class="input-group-append">
                                <span class="input-group-text send_btn"><i class="fas fa-location-arrow"></i></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        let sendMessageTemplate = '<div class="d-flex justify-content-start mb-4">'
            + '<div class="msg_cotainer">'
            + '<span class="msg_time">[userName]</span>'
            + '[text]'
            + '</div>'
            + '</div >';

        let receiveMessageTemplate = '<div class="d-flex justify-content-end mb-4">'
            + '<div class="msg_cotainer_send">'
            + '[text]'
            + '<span class="msg_time_send">[userName]</span>'
            + '</div >'
            + '</div >';

        let connectedUser = '<li id=[id] class="active">'
            + '<div class="d-flex bd-highlight">'
            + '<div class="img_cont">'
            + '<img src="/images/avatar.png" class="rounded-circle user_img">'
            + '</div>'
            + '<div class="user_info">'
            + '<span>[userName]</span>'
            + '</div>'
            + '</div>'
            + '</li >';

        $(function () {

            let userName = '@Model';
            let protocol = location.protocol === "https:" ? "wss:" : "ws:";
            let chatSocket = new WebSocket(`${protocol}//${window.location.host}/chat?userName=${userName}`);
            // let usersSocket = new WebSocket(`${protocol}//${window.location.host}/users?socketType=chatList`);

            $('#action_menu_btn').click(function () {
                $('.action_menu').toggle();
            });

            //usersSocket.onopen = e => {
            //    updateUsersList();
            //};

            //usersSocket.onmessage = e => {
            //    debugger;
            //    if (e.Data) {
            //        const result = JSON.parse(e.Data);
            //        result.forEach((item) => {
            //            $("#contacts").append(item);
            //        })
            //    }
            //};

            window.onbeforeunload = () => {
                const messageObj = {
                    userName: userName,
                    message: 'Saiu da sala'
                };
                sendMessage(messageObj);
                chatSocket.close();
                usersSocket.close();
                logoff();
            };

            chatSocket.onmessage = (e) => {
                let message = JSON.parse(e.data);
                if (message.UserName === userName) {
                    $('#msgs').append(sendMessageTemplate.replace('[text]', message.Message).replace('[userName]', message.UserName));
                } else {
                    if (message.Command === null) {
                        $('#msgs').append(receiveMessageTemplate.replace('[text]', message.Message).replace('[userName]', message.UserName));
                    } else {
                        const strMessage = message.Message.split(' ');
                        const commandLength = (`${strMessage[0]}" "${strMessage[1]}`).length;
                        message.Message = message.Message.substring(commandLength - 1);

                        if (message.Command === "/to") {
                            message.UserName = `${message.UserName} sends to ${strMessage[1]}`;
                        } else if (message.Command === "/private" && message.userName !== userName) {
                            message.UserName = `${message.UserName} sends a private message`;
                        }

                        $('#msgs').append(receiveMessageTemplate.replace('[text]', message.Message).replace('[userName]', message.UserName));
                    }
                }
            };

            chatSocket.onerror = (e) => {
                console.error(e.data);
            };

            $('#MessageField').keypress((e) => {
                if (e.which !== 13 || $('#MessageField').val() === '') {
                    return;
                }

                e.preventDefault();

                const messageObj = {
                    userName: userName,
                    message: $('#MessageField').val()
                }

                sendMessage(messageObj);

                $('#MessageField').val('');
            });

            $("#exitChat").click(() => {
                logoff();
            });

            $("#sendMessage").click(() => {
                const messageObj = {
                    userName: userName,
                    message: $('#MessageField').val()
                }

                sendMessage(messageObj);

                $('#MessageField').val('');
            });

            const sendMessage = (messageObj) => {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("SendMessage", "Home")',
                    data: JSON.stringify(messageObj),
                    contentType: "application/json; charset=utf-8",
                    error: (xhr) => {
                        alert("Error on sendt your message");
                    }
                });
            }

            const logoff = () => {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Logoff", "Home")',
                    data: `userName: ${userName}`,
                    contentType: "application/json; charset=utf-8",
                    success: (xhr) => {
                        chatSocket.close();
                        location.href = "/";
                    }
                });
            };

            const updateUsersList = () => {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("ConnectedUsers", "Home")',
                    data: `userName: ${userName}`,
                    contentType: "application/json; charset=utf-8",
                    success: (response) => {
                        debugger;
                        $("#contacts").html("");
                        let usersOnline = [];
                        response.forEach((item) => {
                            usersOnline.push(connectedUser.replace('[userName]', item.name).replace('[id]', item.id));
                        });
                        usersSocket.send(JSON.stringify(usersOnline));
                        usersSocket.send("teste");
                    }
                });
            };
        });
    </script>
</body>
</html>
